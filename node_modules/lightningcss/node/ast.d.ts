/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type String = string;
/**
 * A CSS rule.
 */
export type Rule<D = Declaration, M = MediaQuery> = | {
    type: "media";
    value: MediaRule<D, M>;
  }
| {
    type: "import";
    value: ImportRule<M>;
  }
| {
    type: "style";
    value: StyleRule<D, M>;
  }
| {
    type: "keyframes";
    value: KeyframesRule<D>;
  }
| {
    type: "font-face";
    value: FontFaceRule;
  }
| {
    type: "font-palette-values";
    value: FontPaletteValuesRule;
  }
| {
    type: "font-feature-values";
    value: FontFeatureValuesRule;
  }
| {
    type: "page";
    value: PageRule<D>;
  }
| {
    type: "supports";
    value: SupportsRule<D, M>;
  }
| {
    type: "counter-style";
    value: CounterStyleRule<D>;
  }
| {
    type: "namespace";
    value: NamespaceRule;
  }
| {
    type: "moz-document";
    value: MozDocumentRule<D, M>;
  }
| {
    type: "nesting";
    value: NestingRule<D, M>;
  }
| {
    type: "nested-declarations";
    value: NestedDeclarationsRule<D>;
  }
| {
    type: "viewport";
    value: ViewportRule<D>;
  }
| {
    type: "custom-media";
    value: CustomMediaRule<M>;
  }
| {
    type: "layer-statement";
    value: LayerStatementRule;
  }
| {
    type: "layer-block";
    value: LayerBlockRule<D, M>;
  }
| {
    type: "property";
    value: PropertyRule;
  }
| {
    type: "container";
    value: ContainerRule<D, M>;
  }
| {
    type: "scope";
    value: ScopeRule<D, M>;
  }
| {
    type: "starting-style";
    value: StartingStyleRule<D, M>;
  }
| {
    type: "view-transition";
    value: ViewTransitionRule;
  }
| {
    type: "ignored";
  }
| {
    type: "unknown";
    value: UnknownAtRule;
  }
| {
    type: "custom";
    value: DefaultAtRule;
  };
/**
 * Represents a media condition.
 */
export type MediaCondition =
  | {
      type: "feature";
      value: QueryFeatureFor_MediaFeatureId;
    }
  | {
      type: "not";
      value: MediaCondition;
    }
  | {
      /**
       * The conditions for the operator.
       */
      conditions: MediaCondition[];
      /**
       * The operator for the conditions.
       */
      operator: Operator;
      type: "operation";
    };
/**
 * A generic media feature or container feature.
 */
export type QueryFeatureFor_MediaFeatureId =
  | {
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId;
      type: "plain";
      /**
       * The feature value.
       */
      value: MediaFeatureValue;
    }
  | {
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId;
      type: "boolean";
    }
  | {
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId;
      /**
       * A comparator.
       */
      operator: MediaFeatureComparison;
      type: "range";
      /**
       * The feature value.
       */
      value: MediaFeatureValue;
    }
  | {
      /**
       * The end value.
       */
      end: MediaFeatureValue;
      /**
       * A comparator for the end value.
       */
      endOperator: MediaFeatureComparison;
      /**
       * The name of the feature.
       */
      name: MediaFeatureNameFor_MediaFeatureId;
      /**
       * A start value.
       */
      start: MediaFeatureValue;
      /**
       * A comparator for the start value.
       */
      startOperator: MediaFeatureComparison;
      type: "interval";
    };
/**
 * A media feature name.
 */
export type MediaFeatureNameFor_MediaFeatureId = MediaFeatureId | String | String;
/**
 * A media query feature identifier.
 */
export type MediaFeatureId =
  | "width"
  | "height"
  | "aspect-ratio"
  | "orientation"
  | "overflow-block"
  | "overflow-inline"
  | "horizontal-viewport-segments"
  | "vertical-viewport-segments"
  | "display-mode"
  | "resolution"
  | "scan"
  | "grid"
  | "update"
  | "environment-blending"
  | "color"
  | "color-index"
  | "monochrome"
  | "color-gamut"
  | "dynamic-range"
  | "inverted-colors"
  | "pointer"
  | "hover"
  | "any-pointer"
  | "any-hover"
  | "nav-controls"
  | "video-color-gamut"
  | "video-dynamic-range"
  | "scripting"
  | "prefers-reduced-motion"
  | "prefers-reduced-transparency"
  | "prefers-contrast"
  | "forced-colors"
  | "prefers-color-scheme"
  | "prefers-reduced-data"
  | "device-width"
  | "device-height"
  | "device-aspect-ratio"
  | "-webkit-device-pixel-ratio"
  | "-moz-device-pixel-ratio";
/**
 * [media feature value](https://drafts.csswg.org/mediaqueries/#typedef-mf-value) within a media query.
 *
 * See [MediaFeature](MediaFeature).
 */
export type MediaFeatureValue =
  | {
      type: "length";
      value: Length;
    }
  | {
      type: "number";
      value: number;
    }
  | {
      type: "integer";
      value: number;
    }
  | {
      type: "boolean";
      value: boolean;
    }
  | {
      type: "resolution";
      value: Resolution;
    }
  | {
      type: "ratio";
      value: Ratio;
    }
  | {
      type: "ident";
      value: String;
    }
  | {
      type: "env";
      value: EnvironmentVariable;
    };
/**
 * A CSS [`<length>`](https://www.w3.org/TR/css-values-4/#lengths) value, with support for `calc()`.
 */
export type Length =
  | {
      type: "value";
      value: LengthValue;
    }
  | {
      type: "calc";
      value: CalcFor_Length;
    };
export type LengthUnit =
  | "px"
  | "in"
  | "cm"
  | "mm"
  | "q"
  | "pt"
  | "pc"
  | "em"
  | "rem"
  | "ex"
  | "rex"
  | "ch"
  | "rch"
  | "cap"
  | "rcap"
  | "ic"
  | "ric"
  | "lh"
  | "rlh"
  | "vw"
  | "lvw"
  | "svw"
  | "dvw"
  | "cqw"
  | "vh"
  | "lvh"
  | "svh"
  | "dvh"
  | "cqh"
  | "vi"
  | "svi"
  | "lvi"
  | "dvi"
  | "cqi"
  | "vb"
  | "svb"
  | "lvb"
  | "dvb"
  | "cqb"
  | "vmin"
  | "svmin"
  | "lvmin"
  | "dvmin"
  | "cqmin"
  | "vmax"
  | "svmax"
  | "lvmax"
  | "dvmax"
  | "cqmax";
/**
 * A mathematical expression used within the [`calc()`](https://www.w3.org/TR/css-values-4/#calc-func) function.
 *
 * This type supports generic value types. Values such as [Length](super::length::Length), [Percentage](super::percentage::Percentage), [Time](super::time::Time), and [Angle](super::angle::Angle) support `calc()` expressions.
 */
export type CalcFor_Length =
  | {
      type: "value";
      value: Length;
    }
  | {
      type: "number";
      value: number;
    }
  | {
      type: "sum";
      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [CalcFor_Length, CalcFor_Length];
    }
  | {
      type: "product";
      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [number, CalcFor_Length];
    }
  | {
      type: "function";
      value: MathFunctionFor_Length;
    };
/**
 * A CSS [math function](https://www.w3.org/TR/css-values-4/#math-function).
 *
 * Math functions may be used in most properties and values that accept numeric values, including lengths, percentages, angles, times, etc.
 */
export type MathFunctionFor_Length =
  | {
      type: "calc";
      value: CalcFor_Length;
    }
  | {
      type: "min";
      value: CalcFor_Length[];
    }
  | {
      type: "max";
      value: CalcFor_Length[];
    }
  | {
      type: "clamp";
      /**
       * @minItems 3
       * @maxItems 3
       */
      value: [CalcFor_Length, CalcFor_Length, CalcFor_Length];
    }
  | {
      type: "round";
      /**
       * @minItems 3
       * @maxItems 3
       */
      value: [RoundingStrategy, CalcFor_Length, CalcFor_Length];
    }
  | {
      type: "rem";
      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [CalcFor_Length, CalcFor_Length];
    }
  | {
      type: "mod";
      /**
       * @minItems 2
       * @maxItems 2
       */
      value: [CalcFor_Length, CalcFor_Length];
    }
  | {
      type: "abs";
      value: CalcFor_Length;
    }
  | {
      type: "sign";
      value: CalcFor_Length;
    }
  | {
      type: "hypot";
      value: CalcFor_Length[];
    };
/**
 * A [rounding strategy](https://www.w3.org/TR/css-values-4/#typedef-rounding-strategy), as used in the `round()` function.
 */
export type RoundingStrategy = "nearest" | "up" | "down" | "to-zero";
/**
 * A CSS [`<resolution>`](https://www.w3.org/TR/css-values-4/#resolution) value.
 */
export type Resolution =
  | {
      type: "dpi";
      value: number;
    }
  | {
      type: "dpcm";
      value: number;
    }
  | {
      type: "dppx";
      value: number;
    };
/**
 * A CSS [`<ratio>`](https://www.w3.org/TR/css-values-4/#ratios) value, representing the ratio of two numeric values.
 *
 * @minItems 2
 * @maxItems 2
 */
export type Ratio = [number, number];
/**
 * A raw CSS token, or a parsed value.
 */
export type TokenOrValue =
  | {
      type: "token";
      value: Token;
    }
  | {
      type: "color";
      value: CssColor;
    }
  | {
      type: "unresolved-color";
      value: UnresolvedColor;
    }
  | {
      type: "url";
      value: Url;
    }
  | {
      type: "var";
      value: Variable;
    }
  | {
      type: "env";
      value: EnvironmentVariable;
    }
  | {
      type: "function";
      value: Function;
    }
  | {
      type: "length";
      value: LengthValue;
    }
  | {
      type: "angle";
      value: Angle;
    }
  | {
      type: "time";
      value: Time;
    }
  | {
      type: "resolution";
      value: Resolution;
    }
  | {
      type: "dashed-ident";
      value: String;
    }
  | {
      type: "animation-name";
      value: AnimationName;
    };
/**
 * A raw CSS token.
 */
export type Token =
  | {
      type: "ident";
      value: String;
    }
  | {
      type: "at-keyword";
      value: String;
    }
  | {
      type: "hash";
      value: String;
    }
  | {
      type: "id-hash";
      value: String;
    }
  | {
      type: "string";
      value: String;
    }
  | {
      type: "unquoted-url";
      value: String;
    }
  | {
      type: "delim";
      value: string;
    }
  | {
      type: "number";
      /**
       * The value as a float
       */
      value: number;
    }
  | {
      type: "percentage";
      /**
       * The value as a float, divided by 100 so that the nominal range is 0.0 to 1.0.
       */
      value: number;
    }
  | {
      type: "dimension";
      /**
       * The unit, e.g. "px" in `12px`
       */
      unit: String;
      /**
       * The value as a float
       */
      value: number;
    }
  | {
      type: "white-space";
      value: String;
    }
  | {
      type: "comment";
      value: String;
    }
  | {
      type: "colon";
    }
  | {
      type: "semicolon";
    }
  | {
      type: "comma";
    }
  | {
      type: "include-match";
    }
  | {
      type: "dash-match";
    }
  | {
      type: "prefix-match";
    }
  | {
      type: "suffix-match";
    }
  | {
      type: "substring-match";
    }
  | {
      type: "cdo";
    }
  | {
      type: "cdc";
    }
  | {
      type: "function";
      value: String;
    }
  | {
      type: "parenthesis-block";
    }
  | {
      type: "square-bracket-block";
    }
  | {
      type: "curly-bracket-block";
    }
  | {
      type: "bad-url";
      value: String;
    }
  | {
      type: "bad-string";
      value: String;
    }
  | {
      type: "close-parenthesis";
    }
  | {
      type: "close-square-bracket";
    }
  | {
      type: "close-curly-bracket";
    };
/**
 * A CSS [`<color>`](https://www.w3.org/TR/css-color-4/#color-type) value.
 *
 * CSS supports many different color spaces to represent colors. The most common values are stored as RGBA using a single byte per component. Less common values are stored using a `Box` to reduce the amount of memory used per color.
 *
 * Each color space is represented as a struct that implements the `From` and `Into` traits for all other color spaces, so it is possible to convert between color spaces easily. In addition, colors support [interpolation](#method.interpolate) as in the `color-mix()` function.
 */
export type CssColor = CurrentColor | RGBColor | LABColor | PredefinedColor | FloatColor | LightDark | SystemColor;
export type CurrentColor = {
  type: "currentcolor";
};
export type RGBColor = {
  /**
   * The alpha component.
   */
  alpha: number;
  /**
   * The blue component.
   */
  b: number;
  /**
   * The green component.
   */
  g: number;
  /**
   * The red component.
   */
  r: number;
  type: "rgb";
};
/**
 * A color in a LAB color space, including the `lab()`, `lch()`, `oklab()`, and `oklch()` functions.
 */
export type LABColor =
  | {
      /**
       * The a component.
       */
      a: number;
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The b component.
       */
      b: number;
      /**
       * The lightness component.
       */
      l: number;
      type: "lab";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The chroma component.
       */
      c: number;
      /**
       * The hue component.
       */
      h: number;
      /**
       * The lightness component.
       */
      l: number;
      type: "lch";
    }
  | {
      /**
       * The a component.
       */
      a: number;
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The b component.
       */
      b: number;
      /**
       * The lightness component.
       */
      l: number;
      type: "oklab";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The chroma component.
       */
      c: number;
      /**
       * The hue component.
       */
      h: number;
      /**
       * The lightness component.
       */
      l: number;
      type: "oklch";
    };
/**
 * A color in a predefined color space, e.g. `display-p3`.
 */
export type PredefinedColor =
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "srgb";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "srgb-linear";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "display-p3";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "a98-rgb";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "prophoto-rgb";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "rec2020";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      type: "xyz-d50";
      /**
       * The x component.
       */
      x: number;
      /**
       * The y component.
       */
      y: number;
      /**
       * The z component.
       */
      z: number;
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      type: "xyz-d65";
      /**
       * The x component.
       */
      x: number;
      /**
       * The y component.
       */
      y: number;
      /**
       * The z component.
       */
      z: number;
    };
/**
 * A floating point representation of color types that are usually stored as RGBA. These are used when there are any `none` components, which are represented as NaN.
 */
export type FloatColor =
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "rgb";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The hue component.
       */
      h: number;
      /**
       * The lightness component.
       */
      l: number;
      /**
       * The saturation component.
       */
      s: number;
      type: "hsl";
    }
  | {
      /**
       * The alpha component.
       */
      alpha: number;
      /**
       * The blackness component.
       */
      b: number;
      /**
       * The hue component.
       */
      h: number;
      type: "hwb";
      /**
       * The whiteness component.
       */
      w: number;
    };
export type LightDark = {
  dark: CssColor;
  light: CssColor;
  type: "light-dark";
};
/**
 * A CSS [system color](https://drafts.csswg.org/css-color/#css-system-colors) keyword.
 */
export type SystemColor =
  | "accentcolor"
  | "accentcolortext"
  | "activetext"
  | "buttonborder"
  | "buttonface"
  | "buttontext"
  | "canvas"
  | "canvastext"
  | "field"
  | "fieldtext"
  | "graytext"
  | "highlight"
  | "highlighttext"
  | "linktext"
  | "mark"
  | "marktext"
  | "selecteditem"
  | "selecteditemtext"
  | "visitedtext"
  | "activeborder"
  | "activecaption"
  | "appworkspace"
  | "background"
  | "buttonhighlight"
  | "buttonshadow"
  | "captiontext"
  | "inactiveborder"
  | "inactivecaption"
  | "inactivecaptiontext"
  | "infobackground"
  | "infotext"
  | "menu"
  | "menutext"
  | "scrollbar"
  | "threeddarkshadow"
  | "threedface"
  | "threedhighlight"
  | "threedlightshadow"
  | "threedshadow"
  | "window"
  | "windowframe"
  | "windowtext";
/**
 * A color value with an unresolved alpha value (e.g. a variable). These can be converted from the modern slash syntax to older comma syntax. This can only be done when the only unresolved component is the alpha since variables can resolve to multiple tokens.
 */
export type UnresolvedColor =
  | {
      /**
       * The unresolved alpha component.
       */
      alpha: TokenOrValue[];
      /**
       * The blue component.
       */
      b: number;
      /**
       * The green component.
       */
      g: number;
      /**
       * The red component.
       */
      r: number;
      type: "rgb";
    }
  | {
      /**
       * The unresolved alpha component.
       */
      alpha: TokenOrValue[];
      /**
       * The hue component.
       */
      h: number;
      /**
       * The lightness component.
       */
      l: number;
      /**
       * The saturation component.
       */
      s: number;
      type: "hsl";
    }
  | {
      /**
       * The dark value.
       */
      dark: TokenOrValue[];
      /**
       * The light value.
       */
      light: TokenOrValue[];
      type: "light-dark";
    };
/**
 * Defines where the class names referenced in the `composes` property are located.
 *
 * See [Composes](Composes).
 */
export type Specifier =
  | {
      type: "global";
    }
  | {
      type: "file";
      value: String;
    }
  | {
      type: "source-index";
      value: number;
    };
/**
 * A CSS [`<angle>`](https://www.w3.org/TR/css-values-4/#angles) value.
 *
 * Angles may be explicit or computed by `calc()`, but are always stored and serialized as their computed value.
 */
export type Angle =
  | {
      type: "deg";
      value: number;
    }
  | {
      type: "rad";
      value: number;
    }
  | {
      type: "grad";
      value: number;
    }
  | {
      type: "turn";
      value: number;
    };
/**
 * A CSS [`<time>`](https://www.w3.org/TR/css-values-4/#time) value, in either seconds or milliseconds.
 *
 * Time values may be explicit or computed by `calc()`, but are always stored and serialized as their computed value.
 */
export type Time =
  | {
      type: "seconds";
      value: number;
    }
  | {
      type: "milliseconds";
      value: number;
    };
/**
 * A value for the [animation-name](https://drafts.csswg.org/css-animations/#animation-name) property.
 */
export type AnimationName =
  | {
      type: "none";
    }
  | {
      type: "ident";
      value: String;
    }
  | {
      type: "string";
      value: String;
    };
/**
 * A CSS environment variable name.
 */
export type EnvironmentVariableName =
  | {
      type: "ua";
      value: UAEnvironmentVariable;
    }
  | {
      /**
       * CSS modules extension: the filename where the variable is defined. Only enabled when the CSS modules `dashed_idents` option is turned on.
       */
      from?: Specifier | null;
      /**
       * The referenced identifier.
       */
      ident: String;
      type: "custom";
    }
  | {
      type: "unknown";
      value: String;
    };
/**
 * A UA-defined environment variable name.
 */
export type UAEnvironmentVariable =
  | "safe-area-inset-top"
  | "safe-area-inset-right"
  | "safe-area-inset-bottom"
  | "safe-area-inset-left"
  | "viewport-segment-width"
  | "viewport-segment-height"
  | "viewport-segment-top"
  | "viewport-segment-left"
  | "viewport-segment-bottom"
  | "viewport-segment-right";
/**
 * A [comparator](https://drafts.csswg.org/mediaqueries/#typedef-mf-comparison) within a media query.
 */
export type MediaFeatureComparison = "equal" | "greater-than" | "greater-than-equal" | "less-than" | "less-than-equal";
/**
 * A binary `and` or `or` operator.
 */
export type Operator = "and" | "or";
export type MediaType = string;
/**
 * A [media query qualifier](https://drafts.csswg.org/mediaqueries/#mq-prefix).
 */
export type Qualifier = "only" | "not";
/**
 * A [`<supports-condition>`](https://drafts.csswg.org/css-conditional-3/#typedef-supports-condition), as used in the `@supports` and `@import` rules.
 */
export type SupportsCondition =
  | {
      type: "not";
      value: SupportsCondition;
    }
  | {
      type: "and";
      value: SupportsCondition[];
    }
  | {
      type: "or";
      value: SupportsCondition[];
    }
  | {
      /**
       * The property id for the declaration.
       */
      propertyId: PropertyId;
      type: "declaration";
      /**
       * The raw value of the declaration.
       */
      value: String;
    }
  | {
      type: "selector";
      value: String;
    }
  | {
      type: "unknown";
      value: String;
    };
export type PropertyId =
  | {
      property: "background-color";
    }
  | {
      property: "background-image";
    }
  | {
      property: "background-position-x";
    }
  | {
      property: "background-position-y";
    }
  | {
      property: "background-position";
    }
  | {
      property: "background-size";
    }
  | {
      property: "background-repeat";
    }
  | {
      property: "background-attachment";
    }
  | {
      property: "background-clip";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "background-origin";
    }
  | {
      property: "background";
    }
  | {
      property: "box-shadow";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "opacity";
    }
  | {
      property: "color";
    }
  | {
      property: "display";
    }
  | {
      property: "visibility";
    }
  | {
      property: "width";
    }
  | {
      property: "height";
    }
  | {
      property: "min-width";
    }
  | {
      property: "min-height";
    }
  | {
      property: "max-width";
    }
  | {
      property: "max-height";
    }
  | {
      property: "block-size";
    }
  | {
      property: "inline-size";
    }
  | {
      property: "min-block-size";
    }
  | {
      property: "min-inline-size";
    }
  | {
      property: "max-block-size";
    }
  | {
      property: "max-inline-size";
    }
  | {
      property: "box-sizing";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "aspect-ratio";
    }
  | {
      property: "overflow";
    }
  | {
      property: "overflow-x";
    }
  | {
      property: "overflow-y";
    }
  | {
      property: "text-overflow";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "position";
    }
  | {
      property: "top";
    }
  | {
      property: "bottom";
    }
  | {
      property: "left";
    }
  | {
      property: "right";
    }
  | {
      property: "inset-block-start";
    }
  | {
      property: "inset-block-end";
    }
  | {
      property: "inset-inline-start";
    }
  | {
      property: "inset-inline-end";
    }
  | {
      property: "inset-block";
    }
  | {
      property: "inset-inline";
    }
  | {
      property: "inset";
    }
  | {
      property: "border-spacing";
    }
  | {
      property: "border-top-color";
    }
  | {
      property: "border-bottom-color";
    }
  | {
      property: "border-left-color";
    }
  | {
      property: "border-right-color";
    }
  | {
      property: "border-block-start-color";
    }
  | {
      property: "border-block-end-color";
    }
  | {
      property: "border-inline-start-color";
    }
  | {
      property: "border-inline-end-color";
    }
  | {
      property: "border-top-style";
    }
  | {
      property: "border-bottom-style";
    }
  | {
      property: "border-left-style";
    }
  | {
      property: "border-right-style";
    }
  | {
      property: "border-block-start-style";
    }
  | {
      property: "border-block-end-style";
    }
  | {
      property: "border-inline-start-style";
    }
  | {
      property: "border-inline-end-style";
    }
  | {
      property: "border-top-width";
    }
  | {
      property: "border-bottom-width";
    }
  | {
      property: "border-left-width";
    }
  | {
      property: "border-right-width";
    }
  | {
      property: "border-block-start-width";
    }
  | {
      property: "border-block-end-width";
    }
  | {
      property: "border-inline-start-width";
    }
  | {
      property: "border-inline-end-width";
    }
  | {
      property: "border-top-left-radius";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "border-top-right-radius";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "border-bottom-left-radius";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "border-bottom-right-radius";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "border-start-start-radius";
    }
  | {
      property: "border-start-end-radius";
    }
  | {
      property: "border-end-start-radius";
    }
  | {
      property: "border-end-end-radius";
    }
  | {
      property: "border-radius";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "border-image-source";
    }
  | {
      property: "border-image-outset";
    }
  | {
      property: "border-image-repeat";
    }
  | {
      property: "border-image-width";
    }
  | {
      property: "border-image-slice";
    }
  | {
      property: "border-image";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "border-color";
    }
  | {
      property: "border-style";
    }
  | {
      property: "border-width";
    }
  | {
      property: "border-block-color";
    }
  | {
      property: "border-block-style";
    }
  | {
      property: "border-block-width";
    }
  | {
      property: "border-inline-color";
    }
  | {
      property: "border-inline-style";
    }
  | {
      property: "border-inline-width";
    }
  | {
      property: "border";
    }
  | {
      property: "border-top";
    }
  | {
      property: "border-bottom";
    }
  | {
      property: "border-left";
    }
  | {
      property: "border-right";
    }
  | {
      property: "border-block";
    }
  | {
      property: "border-block-start";
    }
  | {
      property: "border-block-end";
    }
  | {
      property: "border-inline";
    }
  | {
      property: "border-inline-start";
    }
  | {
      property: "border-inline-end";
    }
  | {
      property: "outline";
    }
  | {
      property: "outline-color";
    }
  | {
      property: "outline-style";
    }
  | {
      property: "outline-width";
    }
  | {
      property: "flex-direction";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "flex-wrap";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "flex-flow";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "flex-grow";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "flex-shrink";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "flex-basis";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "flex";
      vendorPrefix: VendorPrefix;
    }
  | {
      property: "order";
      vendorPrefix: VendorPrefix;
    }
  | {
      prop